//
//  DOStyleKit.swift
//  DO
//
//  Created by Alexander Batalov on 3/26/16.
//  Copyright (c) 2016 Postys. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class DOStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let whiteA05: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        static let whiteA01: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.107)
        static let snoonzedColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let complete: UIColor = UIColor(red: 0.314, green: 0.824, blue: 0.761, alpha: 1.000)
        static let overdueColor: UIColor = UIColor(red: 0.839, green: 0.404, blue: 0.804, alpha: 1.000)
    }

    //// Colors

    public class var whiteA05: UIColor { return Cache.whiteA05 }
    public class var whiteA01: UIColor { return Cache.whiteA01 }
    public class var snoonzedColor: UIColor { return Cache.snoonzedColor }
    public class var complete: UIColor { return Cache.complete }
    public class var overdueColor: UIColor { return Cache.overdueColor }

    //// Drawing Methods

    public class func drawDOTaskProgressView(numberOfTasksToDisplay numberOfTasksToDisplay: CGFloat = 10, numberOfTasksTotal: CGFloat = 20, statusText: String = "SNOOZED") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Variable Declarations
        let numericLabelText = numberOfTasksToDisplay < numberOfTasksTotal ? "\(Int(round(numberOfTasksToDisplay)))" : "00"
        let completeness: CGFloat = numberOfTasksToDisplay / numberOfTasksTotal
        let dash: CGFloat = completeness * 99 + 6

        //// Label Drawing
        let labelRect = CGRect(x: 0, y: 58, width: 63, height: 11)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .Center

        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Book", size: 11)!, NSForegroundColorAttributeName: DOStyleKit.whiteA05, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = NSString(string: statusText).boundingRectWithSize(CGSize(width: labelRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, labelRect)
        NSString(string: statusText).drawInRect(CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        CGContextRestoreGState(context)


        //// numberOfTasksText Drawing
        let numberOfTasksTextRect = CGRect(x: 0, y: 4, width: 63, height: 46)
        let numberOfTasksTextStyle = NSMutableParagraphStyle()
        numberOfTasksTextStyle.alignment = .Center

        let numberOfTasksTextFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Light", size: 40)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: numberOfTasksTextStyle]

        let numberOfTasksTextTextHeight: CGFloat = NSString(string: numericLabelText).boundingRectWithSize(CGSize(width: numberOfTasksTextRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: numberOfTasksTextFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, numberOfTasksTextRect)
        NSString(string: numericLabelText).drawInRect(CGRect(x: numberOfTasksTextRect.minX, y: numberOfTasksTextRect.minY + (numberOfTasksTextRect.height - numberOfTasksTextTextHeight) / 2, width: numberOfTasksTextRect.width, height: numberOfTasksTextTextHeight), withAttributes: numberOfTasksTextFontAttributes)
        CGContextRestoreGState(context)


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 29.5, y: 97.5, width: 3, height: 3))
        UIColor.whiteColor().setFill()
        oval2Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 16, y: 84, width: 30, height: 30))
        DOStyleKit.whiteA01.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// progress Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 31, 99)
        CGContextRotateCTM(context, -90.19 * CGFloat(M_PI) / 180)

        let progressPath = UIBezierPath()
        progressPath.moveToPoint(CGPoint(x: 15, y: -0))
        progressPath.addCurveToPoint(CGPoint(x: -0, y: 15), controlPoint1: CGPoint(x: 15, y: 8.28), controlPoint2: CGPoint(x: 8.28, y: 15))
        progressPath.addCurveToPoint(CGPoint(x: -15, y: -0), controlPoint1: CGPoint(x: -8.28, y: 15), controlPoint2: CGPoint(x: -15, y: 8.28))
        progressPath.addCurveToPoint(CGPoint(x: 0, y: -15), controlPoint1: CGPoint(x: -15, y: -8.28), controlPoint2: CGPoint(x: -8.28, y: -15))
        progressPath.addCurveToPoint(CGPoint(x: 15, y: -0), controlPoint1: CGPoint(x: 8.28, y: -15), controlPoint2: CGPoint(x: 15, y: -8.28))
        progressPath.closePath()
        progressPath.lineCapStyle = .Round;

        DOStyleKit.snoonzedColor.setStroke()
        progressPath.lineWidth = 2
        CGContextSaveGState(context)
        CGContextSetLineDash(context, 9, [dash, 99], 2)
        progressPath.stroke()
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

}
